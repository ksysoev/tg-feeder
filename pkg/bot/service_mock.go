// Code generated by mockery. DO NOT EDIT.

//go:build !compile

package bot

import (
	context "context"

	core "github.com/ksysoev/tg-feeder/pkg/core"
	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// AddFeed provides a mock function with given fields: ctx, url
func (_m *MockService) AddFeed(ctx context.Context, url string) (*core.Response, error) {
	ret := _m.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for AddFeed")
	}

	var r0 *core.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*core.Response, error)); ok {
		return rf(ctx, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *core.Response); ok {
		r0 = rf(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_AddFeed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFeed'
type MockService_AddFeed_Call struct {
	*mock.Call
}

// AddFeed is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
func (_e *MockService_Expecter) AddFeed(ctx interface{}, url interface{}) *MockService_AddFeed_Call {
	return &MockService_AddFeed_Call{Call: _e.mock.On("AddFeed", ctx, url)}
}

func (_c *MockService_AddFeed_Call) Run(run func(ctx context.Context, url string)) *MockService_AddFeed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_AddFeed_Call) Return(_a0 *core.Response, _a1 error) *MockService_AddFeed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_AddFeed_Call) RunAndReturn(run func(context.Context, string) (*core.Response, error)) *MockService_AddFeed_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
